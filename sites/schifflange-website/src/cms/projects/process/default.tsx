'use client'
import { Container } from '@/components/container'
import { Hn } from '@/components/hn'
import { Link } from '@/components/link'
import { textVariants } from '@/components/variants'
import { Wrapper } from '@/components/wrapper'
import { useTranslation } from '@/lib/localize'
import { makeLinkProps } from '@/utils/links'
import { A, cn, S, stripHtml } from '@compo/utils'
// import { ProjectDialog } from './dialogs'
import { prose } from '@compo/ui/src/variants'
import type { TemplateProps } from './index'

/**
 * TemplateDefault
 * A simple template with a title, description, and image.
 */
export function TemplateDefault({ props }: TemplateProps) {
  const { _ } = useTranslation(dictionary)
  const { title, level, subtitle, description, displayHeading, cards } = props
  const hasDescription = S.isNotEmpty(S.trim(stripHtml(description)))
  return (
    <Wrapper paddingY>
      <Container>
        {displayHeading && (
          <div className='grid grid-cols-1 gap-8 md:grid-cols-2 pb-[24px]'>
            <div className='flex flex-col justify-center'>
              {title && (
                <Hn level={level} className={textVariants({ variant: 'title', color: 'tuna' })}>
                  {title}
                </Hn>
              )}
              {subtitle && (
                <p className={textVariants({ variant: 'subtitle', color: 'tuna' })}>{subtitle}</p>
              )}
              {hasDescription && (
                <div
                  className={prose({ variant: 'heading' })}
                  dangerouslySetInnerHTML={{ __html: description }}
                />
              )}
            </div>
          </div>
        )}
        <div className='grid grid-cols-1 md:grid-cols-3 items-stretch'>
          {A.mapWithIndex(cards, (index, { key, ...card }) => {
            const isFirst = index === 0
            const isLast = index === cards.length - 1
            return (
              <div key={key} className='grid grid-rows-[auto_1fr]'>
                <div className='grid grid-cols-[1fr_auto_1fr] items-center pb-[26px]'>
                  {<div className={cn('border-t border-[#BD8B48]/60', isFirst && 'border-t-0')} />}
                  <Hn
                    level={card.level}
                    className={textVariants({
                      variant: 'cardTitle',
                      color: 'tuna',
                      className: cn('text-center px-[20px]', isFirst && 'pl-0', isLast && 'pr-0'),
                    })}
                  >
                    {_(key)}
                  </Hn>
                  {<div className={cn('border-t border-[#BD8B48]/60', isLast && 'border-t-0')} />}
                </div>
                <div
                  className={cn(
                    'mx-[20px]',
                    isFirst && 'ml-0',
                    isLast && 'mr-0',
                    'relative rounded-[8px] p-[8px] pt-[47px] grid grid-rows-[auto_1fr]',
                    key === 'consultation' && 'bg-[#626A4F]',
                    key === 'incubation' && 'bg-[#BBDAB0]',
                    key === 'scaling' && 'bg-[#98C5D5]'
                  )}
                >
                  <div className='absolute -top-[26px] inset-x-0 flex justify-center' aria-hidden>
                    <span className='rounded-full bg-[#FAF6F1] flex justify-center items-center size-[52px]'>
                      {key === 'consultation' && <ConsultationSvg className='size-[38px]' />}
                      {key === 'incubation' && <IncubationSvg className='size-[38px]' />}
                      {key === 'scaling' && <ScalingSvg className='size-[38px]' />}
                    </span>
                  </div>
                  <p
                    className={textVariants({
                      variant: 'cardTitle',
                      color: key === 'consultation' ? 'white' : 'tuna',
                      className:
                        'text-center pb-[16px] text-[20px] leading-normal font-semibold my-0',
                    })}
                    aria-hidden={!card.title}
                  >
                    {card.title || <span className='invisible'>&nbsp;</span>}
                  </p>
                  <div className='flex flex-col gap-[16px] justify-between bg-[#FAF6F1] rounded-[8px] p-[16px]'>
                    <div
                      className={prose({
                        variant: 'default',
                        className: '-my-2',
                      })}
                      dangerouslySetInnerHTML={{ __html: card.description }}
                    />
                    {card.link && (
                      <div>
                        <Button link={card.link} />
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      </Container>
    </Wrapper>
  )
}

export type ButtonProps = {
  link: ReturnType<typeof makeLinkProps>
}
export const Button: React.FC<ButtonProps> = ({ link }) => {
  if (!link?.href) return null
  const cx = cn(
    'px-4 py-2 inline-flex items-center justify-center gap-2 rounded-[8px] text-[12px] leading-normal font-medium text-[#1D1D1B] border-[1.5px] border-[#E5D2B9] cursor-pointer'
  )
  // const matched = link.href.match(/^\[(consultation|incubation|scaling):([a-f0-9-]{36})\]$/)
  // if (matched) {
  //   const type = match(matched[1])
  //     .with('scaling', () => 'scaling' as const)
  //     .with('incubation', () => 'incubation' as const)
  //     .otherwise(() => 'consultation' as const)
  //   const uid = matched[2]
  //   return (
  //     <ProjectDialog type={type} uid={uid}>
  //       <button className={cx}>
  //         {link.text}
  //         <ArrowSvg aria-hidden className='size-5' />
  //       </button>
  //     </ProjectDialog>
  //   )
  // }
  if (link.isLink)
    return (
      <Link href={link.href} className={cx}>
        {link.text}
        <ArrowSvg aria-hidden className='size-5' />
      </Link>
    )
  return (
    <a href={link.href} target='_blank' rel='noopener noreferrer nofollow' className={cx}>
      {link.text}
      <ArrowSvg aria-hidden className='size-5' />
    </a>
  )
}

/**
 * icons
 */
const ArrowSvg = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg' {...props}>
      <path
        d='M4.6665 4.66663H11.3332M11.3332 4.66663V11.3333M11.3332 4.66663L4.6665 11.3333'
        stroke='#1D1D1B'
        strokeWidth='1.25'
        strokeLinecap='square'
        strokeLinejoin='round'
      />
    </svg>
  )
}
const ConsultationSvg = (props: React.SVGProps<SVGSVGElement>) => (
  <svg viewBox='0 0 38 38' fill='none' xmlns='http://www.w3.org/2000/svg' {...props}>
    <path
      d='M36.5431 11.7207C36.1233 10.7242 35.6225 9.7681 35.0509 8.86262C34.4843 7.96219 33.8419 7.11235 33.1337 6.32322C32.3799 5.48349 31.5453 4.70953 30.6499 4.01145C29.7596 3.31842 28.8035 2.70128 27.7969 2.17013C25.1613 0.789137 22.1717 0 19 0C15.8283 0 12.8336 0.789137 10.2031 2.17013C9.19143 2.69622 8.23536 3.31842 7.34505 4.01145C6.44968 4.70953 5.62007 5.48349 4.86129 6.32322C4.15309 7.11235 3.51571 7.96219 2.94409 8.86262C2.37247 9.7681 1.87167 10.7242 1.45687 11.7207C0.515974 13.9667 0 16.4252 0 19C0 21.5748 0.521033 24.0383 1.45687 26.2843C1.87167 27.2809 2.37247 28.237 2.94409 29.1424C3.51571 30.0429 4.15309 30.8927 4.86129 31.6818C5.62007 32.5216 6.44968 33.2955 7.34505 33.9886C8.23536 34.6866 9.19143 35.3038 10.2031 35.8349C12.8336 37.2159 15.8232 38 19 38C22.1768 38 25.1613 37.2159 27.7969 35.8349C28.8035 35.3038 29.7596 34.6866 30.6499 33.9886C31.5453 33.2955 32.3799 32.5216 33.1337 31.6818C33.8419 30.8927 34.4843 30.0429 35.0509 29.1424C35.6225 28.237 36.1233 27.2809 36.5431 26.2843C37.479 24.0383 38 21.5799 38 19C38 16.4201 37.479 13.9667 36.5431 11.7207ZM19 2.86821C21.0942 2.86821 23.0924 3.27796 24.9337 4.00639C22.3336 6.0197 20.2697 8.69063 19 11.7713C17.7252 8.69063 15.6613 6.0197 13.0663 4.00639C14.9026 3.27796 16.9007 2.86821 19 2.86821ZM2.86821 19C2.86821 17.6291 3.0402 16.2987 3.36395 15.029C4.84105 15.7423 5.86794 17.2497 5.86794 19C5.86794 20.7503 4.84105 22.2628 3.36395 22.976C3.0402 21.7063 2.86821 20.3709 2.86821 19ZM5.8123 28.2774C5.24068 27.4681 4.73988 26.603 4.32508 25.6925C6.91507 24.5745 8.73616 21.9997 8.73616 19C8.73616 16.0003 6.91507 13.4255 4.32508 12.3126C4.73988 11.402 5.24068 10.537 5.8123 9.72258C9.29766 11.3666 11.7157 14.9026 11.7157 19C11.7157 23.0974 9.29766 26.6334 5.8123 28.2774ZM10.2031 32.5165C9.31789 31.9348 8.48829 31.2721 7.7295 30.5285C11.8118 28.3027 14.5839 23.9675 14.5839 19C14.5839 14.0325 11.8118 9.70234 7.7295 7.47151C8.48829 6.73296 9.31789 6.06523 10.2031 5.48855C14.6294 8.36182 17.5634 13.3445 17.5634 19C17.5634 24.6555 14.6294 29.6432 10.2031 32.5165ZM19 35.1318C16.9007 35.1318 14.9026 34.7271 13.0663 33.9987C15.6613 31.9803 17.7252 29.3094 19 26.2287C20.2697 29.3094 22.3336 31.9803 24.9337 33.9987C23.0924 34.7271 21.0942 35.1318 19 35.1318ZM27.7918 32.5165C23.3655 29.6432 20.4316 24.6605 20.4316 19C20.4316 13.3395 23.3655 8.36182 27.7918 5.48855C28.6821 6.07029 29.5067 6.73296 30.2654 7.47151C26.1832 9.70234 23.4111 14.0325 23.4111 19C23.4111 23.9675 26.1882 28.3027 30.2654 30.5285C29.5067 31.2721 28.6821 31.9348 27.7918 32.5165ZM32.1826 28.2774C28.7023 26.6334 26.2793 23.1025 26.2793 19C26.2793 14.8975 28.7023 11.3666 32.1826 9.72258C32.7543 10.537 33.2551 11.402 33.6699 12.3126C31.0799 13.4255 29.2588 16.0053 29.2588 19C29.2588 21.9947 31.0799 24.5745 33.6699 25.6925C33.2551 26.603 32.7543 27.4681 32.1826 28.2774ZM34.631 22.976C33.1539 22.2628 32.127 20.7503 32.127 19C32.127 17.2497 33.1539 15.7423 34.631 15.029C34.9547 16.2987 35.1318 17.6291 35.1318 19C35.1318 20.3709 34.9547 21.7063 34.631 22.976Z'
      fill='#626A4F'
    />
  </svg>
)
const IncubationSvg = (props: React.SVGProps<SVGSVGElement>) => (
  <svg viewBox='0 0 38 38' fill='none' xmlns='http://www.w3.org/2000/svg' {...props}>
    <path
      d='M37.9747 18.0945L37.9393 17.5634C37.8634 16.5466 37.7066 15.5501 37.479 14.5839C37.2412 13.5974 36.9326 12.6414 36.5482 11.7157C36.0777 10.5977 35.5061 9.53035 34.8434 8.52875C33.4321 6.3991 31.6009 4.56789 29.4712 3.15655C28.4696 2.48882 27.4023 1.9172 26.2843 1.45181C25.3586 1.06736 24.4026 0.758786 23.4161 0.521033C22.4449 0.293397 21.4534 0.136581 20.4366 0.0607029C20.2596 0.0455272 20.0876 0.0303514 19.9105 0.0202343C19.607 0.0101171 19.3035 0 19 0C18.6965 0 18.393 0.0101171 18.0895 0.0202343C17.9124 0.0303514 17.7404 0.0455272 17.5684 0.0607029C14.9278 0.257987 12.434 0.996539 10.2031 2.16507C9.19649 2.69622 8.24042 3.31337 7.34505 4.01145C6.45474 4.70447 5.62007 5.47843 4.86635 6.31816C4.15815 7.10729 3.51571 7.95714 2.94409 8.85756C2.37247 9.76305 1.87167 10.7191 1.45181 11.7157C1.07242 12.6414 0.758786 13.5974 0.526092 14.5839C0.293397 15.5501 0.136581 16.5466 0.0607029 17.5634C0.0455272 17.7354 0.0303514 17.9073 0.0252929 18.0844C0.0101171 18.3879 0 18.6914 0 19C0 19.3086 0.0101171 19.6121 0.0252929 19.9156C0.0303514 20.0876 0.0455272 20.2596 0.0607029 20.4316C0.136581 21.4483 0.293397 22.4449 0.526092 23.4111C0.758786 24.4026 1.07242 25.3586 1.45181 26.2793C1.92226 27.4023 2.49388 28.4696 3.15655 29.4662C4.56789 31.6009 6.3991 33.4321 8.52875 34.8434C9.53035 35.5061 10.5977 36.0777 11.7207 36.5431C12.6414 36.9276 13.5974 37.2412 14.5889 37.4739C15.5551 37.7066 16.5517 37.8634 17.5684 37.9393C17.7404 37.9494 17.9175 37.9646 18.0945 37.9747C18.393 37.9899 18.6965 38 19 38C19.3035 38 19.607 37.9899 19.9055 37.9747C20.0825 37.9646 20.2596 37.9494 20.4366 37.9393C23.0772 37.742 25.566 37.0035 27.7969 35.8299C28.8086 35.3038 29.7596 34.6816 30.655 33.9886C31.5503 33.2905 32.3799 32.5216 33.1387 31.6768C33.8469 30.8876 34.4843 30.0378 35.0559 29.1374C35.6275 28.237 36.1283 27.2809 36.5482 26.2793C36.9326 25.3586 37.2412 24.4026 37.479 23.4111C37.7066 22.4449 37.8634 21.4483 37.9393 20.4316C37.9545 20.2545 37.9696 20.0825 37.9747 19.9055C37.9899 19.602 38 19.3035 38 19C38 18.6965 37.9899 18.393 37.9747 18.0945ZM33.0527 11.0935C30.2047 10.0564 27.9436 7.79526 26.9065 4.94728C29.4712 6.39404 31.606 8.52875 33.0527 11.0935ZM23.578 3.53088C24.4683 9.11049 28.8895 13.5266 34.4641 14.4169C34.7575 15.4084 34.9598 16.4353 35.061 17.4925C27.3568 16.7894 21.2106 10.6382 20.5075 2.93903C21.5647 3.0402 22.5916 3.23749 23.578 3.53088ZM5.81736 9.72258C9.29766 11.3666 11.7207 14.8975 11.7207 19V20.5935C10.7798 19.9864 9.78328 19.4553 8.74121 19.0202V19C8.74121 16.0003 6.92013 13.4255 4.32508 12.3075C4.74494 11.397 5.24068 10.5319 5.81736 9.72258ZM3.36395 15.024C4.57295 15.6057 5.47843 16.7236 5.77183 18.0642C4.84611 17.8517 3.90016 17.6999 2.92891 17.6291C3.00479 16.7388 3.15149 15.8687 3.36395 15.024ZM4.94728 26.9015C7.80032 27.9385 10.0615 30.1997 11.0935 33.0527C8.52875 31.6009 6.39404 29.4712 4.94728 26.9015ZM14.422 34.4641C13.5317 28.8844 9.11555 24.4683 3.53594 23.578C3.24255 22.5865 3.0402 21.5596 2.93903 20.5024C10.6432 21.2106 16.7894 27.3568 17.4976 35.0559C16.4404 34.9598 15.4084 34.7575 14.422 34.4641ZM20.3709 35.066C20.0016 30.2857 17.8568 25.996 14.5889 22.8597V19C14.5889 14.0325 11.8118 9.69728 7.73456 7.47151C8.48829 6.7279 9.31789 6.06523 10.2082 5.48349C14.6345 8.35676 17.5684 13.3395 17.5684 19C17.5684 19.4806 17.5887 19.9611 17.6241 20.4316C18.0389 25.9404 20.811 30.7966 24.9337 33.9936C23.5021 34.5652 21.9694 34.9345 20.3709 35.066ZM27.7918 32.5114C23.3706 29.6382 20.4366 24.6555 20.4366 19C20.4366 12.9044 17.5431 7.47657 13.0663 4.00133C14.4979 3.43477 16.0306 3.0655 17.6291 2.92891C17.9984 7.71432 20.1483 12.004 23.4161 15.1403V19C23.4161 23.9675 26.1882 28.2977 30.2654 30.5285C29.5117 31.267 28.6821 31.9348 27.7918 32.5114ZM32.1877 28.2774C28.7023 26.6334 26.2843 23.0974 26.2843 19V17.4065C27.2202 18.0136 28.2167 18.5397 29.2638 18.9798V19C29.2638 21.9947 31.0799 24.5745 33.6749 25.6874C33.2551 26.598 32.7593 27.463 32.1877 28.2774ZM34.636 22.971C33.4271 22.3892 32.5216 21.2764 32.2332 19.9308C33.1539 20.1483 34.0998 20.295 35.0711 20.3709C34.9952 21.2612 34.8485 22.1313 34.636 22.971Z'
      fill='#BBDAB0'
    />
  </svg>
)
const ScalingSvg = (props: React.SVGProps<SVGSVGElement>) => (
  <svg viewBox='0 0 38 38' fill='none' xmlns='http://www.w3.org/2000/svg' {...props}>
    <path
      d='M36.5431 11.7207C36.0777 10.5927 35.5061 9.53035 34.8434 8.52875C33.427 6.3991 31.6009 4.56789 29.4662 3.15655C28.4646 2.49388 27.4023 1.92226 26.2793 1.45687C24.0383 0.515974 21.5799 0 19 0C16.4201 0 13.9617 0.515974 11.7157 1.45687C10.5927 1.92226 9.53035 2.49388 8.52875 3.15655C6.3991 4.56789 4.56789 6.3991 3.15655 8.52875C2.49388 9.53035 1.92226 10.5927 1.45687 11.7157C0.515974 13.9617 0 16.4201 0 19C0 21.5799 0.515974 24.0383 1.45687 26.2793C1.92226 27.4023 2.49388 28.4646 3.15655 29.4662C4.56789 31.6009 6.3991 33.427 8.52875 34.8434C9.53035 35.5061 10.5927 36.0777 11.7157 36.5431C13.9617 37.484 16.4201 38 19 38C21.5799 38 24.0383 37.484 26.2793 36.5431C27.4023 36.0777 28.4646 35.5061 29.4662 34.8434C31.6009 33.427 33.427 31.6009 34.8434 29.4662C35.5061 28.4646 36.0777 27.4023 36.5431 26.2793C37.479 24.0333 38 21.5748 38 19C38 16.4252 37.479 13.9617 36.5431 11.7207ZM33.0527 11.0935C30.1997 10.0564 27.9385 7.79526 26.9015 4.94223C29.4712 6.39404 31.6009 8.5237 33.0527 11.0935ZM11.0935 4.94223C10.0564 7.79526 7.79526 10.0564 4.94223 11.0935C6.39404 8.5237 8.5237 6.39404 11.0935 4.94223ZM3.53088 14.4169C9.11049 13.5266 13.5266 9.11049 14.4169 3.53088C15.4084 3.23749 16.4353 3.0402 17.4925 2.93903C16.7843 10.6382 10.6382 16.7843 2.93903 17.4925C3.03514 16.4353 3.23749 15.4084 3.53088 14.4169ZM4.94223 26.9015C7.79526 27.9385 10.0564 30.1997 11.0935 33.0527C8.5237 31.6009 6.39404 29.4712 4.94223 26.9015ZM14.4169 34.4641C13.5266 28.8844 9.11049 24.4683 3.53088 23.578C3.23749 22.5865 3.03514 21.5596 2.93903 20.5024C10.6382 21.2106 16.7843 27.3568 17.4925 35.0559C16.4353 34.9598 15.4084 34.7575 14.4169 34.4641ZM8.68557 19C13.3445 17.0727 17.0727 13.3445 19 8.68557C20.9273 13.3445 24.6555 17.0727 29.3144 19C24.6555 20.9273 20.9273 24.6555 19 29.3144C17.0727 24.6555 13.3445 20.9273 8.68557 19ZM26.9015 33.0527C27.9385 30.1997 30.1997 27.9385 33.0527 26.9015C31.6009 29.4712 29.4712 31.6009 26.9015 33.0527ZM34.4641 23.578C28.8844 24.4683 24.4683 28.8844 23.578 34.4641C22.5865 34.7575 21.5596 34.9598 20.5024 35.0559C21.2106 27.3568 27.3568 21.2106 35.0559 20.5024C34.9598 21.5596 34.7575 22.5865 34.4641 23.578ZM20.5024 2.93903C21.5596 3.0402 22.5865 3.23749 23.578 3.53088C24.4683 9.11049 28.8844 13.5266 34.4641 14.4169C34.7575 15.4084 34.9598 16.4353 35.0559 17.4925C27.3568 16.7843 21.2106 10.6382 20.5024 2.93903Z'
      fill='#98C5D5'
    />
  </svg>
)

/**
 * translations
 */
const dictionary = {
  fr: {
    consultation: 'Consultation',
    incubation: 'Incubation',
    scaling: 'Multiplication',
  },
  en: {
    consultation: 'Consultation',
    incubation: 'Incubation',
    scaling: 'Scaling',
  },
  de: {},
}
