import { createService } from "./service"

export type {
  InferFetchError as InferError,
  InferFetchResult as InferResult,
  InferFetchValue as InferValue,
} from "adnf"
export type * as Admin from "./admin/types"
export type * from "./auth/types"
export type * from "./contents/types"
export type * from "./languages/types"
export type * from "./notifications/types"
export type * as Payload from "./payload"
export type * from "./publications/types"
export type * from "./schedules/types"
export type * from "./seos/types"
export type * from "./trackings/types"
export type * from "./users/types"
export type * from "./workspaces/directory/types"
export type * from "./workspaces/forwards/types"
export type * from "./workspaces/libraries/types"
export type * from "./workspaces/medias/types"
export type * from "./workspaces/menus/types"
export type * from "./workspaces/slugs/types"
export type * from "./workspaces/types"

/**
 * translations
 */
export type TranslatableValues = Record<string, unknown>
export type ByLanguage<I extends TranslatableValues> = Record<string, I>
export type Translatable<T extends TranslatableValues> = {
  translations: T[]
}

/**
 * files
 */
export type SingleFile = {
  url: string
  size: number
  extension: string
  originalName: string
}
export type MultipleFile = SingleFile & {
  id: string
}
export type SingleImage = SingleFile & {
  thumbnailUrl: string
  previewUrl: string
  originalUrl: string
}
export type ExtraField = {
  name: string
  value: string
  type?: "phone" | "email" | "url" | "text" | "number" | "boolean" | "date" | "time" | "datetime" | "textarea"
}
export type Address = {
  street: string
  city: string
  state: string
  zip: string
  country: string
}
export type Aspect = {
  w: number
  h: number
}
export type Crop = {
  x: number
  y: number
}
export type Coord = {
  x: number
  y: number
}
export type Size = {
  width: number
  height: number
}

/**
 * define the device info type use in the api to describe user agent
 */
export type DeviceInfo = {
  client: {
    type: string | null
    name: string | null
    version: string | null
  } | null
  os: {
    name: string | null
    version: string | null
  } | null
  device: {
    type: string | null
    brand: string | null
    model: string | null
  } | null
  bot: any | null
}

export interface PaginationMeta {
  total: number
  perPage: number
  currentPage: number
  lastPage: number
  firstPage: number
  firstPageUrl: string
  lastPageUrl: string
  nextPageUrl: string | null
  previousPageUrl: string | null
}
export interface PaginatedResponse<T> {
  data: T[]
  meta: PaginationMeta
}
export interface SortOptions {
  field?: string
  direction?: "asc" | "desc"
}
export interface MakeSortOptions<T extends string> {
  field: T
  direction: "asc" | "desc"
}

export type FilterOptions = Record<string, unknown>
export type RequestPaginated = {
  page?: number
  limit?: number
}
export type RequestOptions = RequestPaginated & {
  search?: string
  sortBy?: SortOptions
  filterBy?: FilterOptions
}
export type MakeRequestOptions<S extends string, F extends FilterOptions> = RequestPaginated & {
  search?: string
  sortBy?: MakeSortOptions<S>
  filterBy?: F
}

/**
 * basic error format use in the api
 */
export type NamedError<E extends string> = { name: E }

/**
 * common errors and error generated by middleware or validation
 */
export type CommonErrors<N = void> = NamedError<"E_TOO_MANY_REQUESTS" | (N extends string ? N : never)>
export type AuthErrors<N = void> = CommonErrors<"E_UNAUTHORIZED_ACCESS" | (N extends string ? N : never)>
export type WorkspaceErrors<N = void> = AuthErrors<
  | "E_FORBIDDEN_ACCESS"
  | "E_RESOURCE_NOT_ALLOWED"
  | "E_WORKSPACE_NOT_ACTIVE"
  | "E_WORKSPACE_NOT_ALLOWED"
  | "E_UNAUTHENTICATED_ACCESS"
  | (N extends string ? N : never)
>
export type WorkspaceAdminErrors<N = void> = WorkspaceErrors<
  "E_WORKSPACE_ADMIN_REQUIRED" | (N extends string ? N : never)
>
export type WorkspaceOwnerErrors<N = void> = WorkspaceErrors<
  "E_WORKSPACE_OWNER_REQUIRED" | (N extends string ? N : never)
>
export type AdminErrors<N = void> = AuthErrors<"E_FORBIDDEN_ACCESS" | (N extends string ? N : never)>
export type NotFoundErrors = CommonErrors<"E_RESOURCE_NOT_FOUND">
export type ValidationErrors<Errors extends { field: string; rule: string }[] = { field: string; rule: string }[]> = {
  name: "E_VALIDATION_FAILURE"
  errors: Errors
}

/**
 * other api return types
 */
export type NoContent = {
  //
}

export type Service = ReturnType<typeof createService>

/**
 * exported helpers
 */
export type MakePath = ReturnType<typeof createService>["makePath"]
export type GetImageUrl = (
  image: SingleImage | null | undefined,
  type?: "thumbnail" | "preview" | "original"
) => string | null | undefined
