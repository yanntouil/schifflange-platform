export * from "./articles/types"
export * from "./contents/types"
export * from "./medias/types"
export * from "./menus/types"
export * from "./pages/types"
export * from "./projects/types"
export * from "./publications/types"
export * from "./seos/types"
export * from "./sites/types"
export * from "./slugs/types"
export * from "./users/types"

/**
 * general types
 */
export type SingleFile = {
  url: string
  size: number
  extension: string
  originalName: string
}
export type MultipleFile = SingleFile & {
  id: string
}
export type SingleImage = SingleFile & {
  thumbnailUrl: string
  previewUrl: string
  originalUrl: string
}
export type ExtraField = {
  name: string
  value: string
}
export type Address = {
  street: string
  city: string
  state: string
  zip: string
  country: string
}
export type Language = {
  id: string
  name: string
  code: string
  locale: string
  default: boolean
  isDefault: boolean
}

/**
 * basic error format use in the api
 */
export type NamedError<E extends string> = { name: E }

/**
 * common errors and error generated by middleware or validation
 */
export type CommonErrors<N = void> = NamedError<"E_TOO_MANY_REQUESTS" | (N extends string ? N : never)>

/**
 * api types
 */
export interface PaginationMeta {
  total: number
  perPage: number
  currentPage: number
  lastPage: number
  firstPage: number
  firstPageUrl: string
  lastPageUrl: string
  nextPageUrl: string | null
  previousPageUrl: string | null
}
export interface PaginatedResponse<T> {
  data: T[]
  meta: PaginationMeta
}
export interface SortOptions {
  field?: string
  direction?: "asc" | "desc"
}
export interface MakeSortOptions<T extends string> {
  field: T
  direction: "asc" | "desc"
}

export type FilterOptions = Record<string, unknown>
export type RequestPaginated = {
  page?: number
  limit?: number
}
export type RequestOptions = RequestPaginated & {
  search?: string
  sortBy?: SortOptions
  filterBy?: FilterOptions
}
export type MakeRequestOptions<S extends string, F extends FilterOptions> = RequestPaginated & {
  search?: string
  sortBy?: MakeSortOptions<S>
  filterBy?: F
}
